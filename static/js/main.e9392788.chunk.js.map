{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","tasks_list","set_tasks_list","stored_tasks","localStorage","getItem","stored_tasks_array","JSON","parse","tasksList","length","map","task","index","key","Math","random","task_name","task_details","className","onClick","splice","setItem","stringify","handleDeleteTask","colspan","type","name","id","placeholder","value","e","preventDefault","task_name_value","document","getElementById","task_details_value","withReactContent","Swal","fire","title","text","icon","confirmButtonText","push","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gMAKe,SAASA,IAAM,IAAD,EACQC,qBADR,mBACtBC,EADsB,KACVC,EADU,MAG3B,WACE,IAAIC,EAAeC,aAAaC,QAAQ,cAExC,GAAqB,OAAjBF,EACFF,EAAa,OACR,CACL,IAAIK,EAAqBC,KAAKC,MAAML,GACpCF,EAAaK,GAPjB,GAWA,IAkCIG,EAAaR,EAAWS,OAAS,EACnCT,EAAWU,KAAI,SAACC,EAAMC,GACpB,OACE,wBAAIC,IAAmB,GAAdC,KAAKC,UACZ,4BAAKH,EAAM,GACX,4BAAKD,EAAKK,WACV,4BAAKL,EAAKM,cACV,4BAAI,0BAAMC,UAAU,cAAcC,QAAS,kBAb5B,SAACP,GACtBZ,EAAWoB,OAAOR,EAAO,GACzBX,EAAe,YAAID,IACnBG,aAAakB,QAAQ,aAAcf,KAAKgB,UAAUtB,IAUKuB,CAAiBX,KAA9D,UAKV,wBAAIM,UAAU,aACZ,wBAAIM,QAAQ,KAAI,mEAIpB,OACE,yBAAKN,UAAU,gBACb,wBAAIA,UAAU,cACZ,0BAAMA,UAAU,iBAAhB,MACA,0BAAMA,UAAU,iBAAhB,MACA,0BAAMA,UAAU,wBAAhB,QAEF,2BAAOA,UAAU,0BACf,+BACE,4BACE,kCACA,oCACA,uCACA,wCAGJ,+BACGV,GAEH,+BACE,4BACE,wBAAIgB,QAAQ,KACV,2BACEC,KAAK,OACLC,KAAK,YACLC,GAAG,YACHC,YAAY,qBAGhB,4BACE,2BACEH,KAAK,OACLC,KAAK,eACLC,GAAG,eACHC,YAAY,wBAGhB,4BACE,2BACEH,KAAK,SACLC,KAAK,cACLC,GAAG,cACHE,MAAM,WACNV,QA9FM,SAACW,GACnBA,EAAEC,iBAEF,IAAIpB,EACAqB,EAAkBC,SAASC,eAAe,aAAaL,MACvDM,EAAqBF,SAASC,eAAe,gBAAgBL,MAEzC,KAApBG,GAAiD,KAAvBG,EACfC,IAAiBC,KAEvBC,KAAK,CACVC,MAAO,SACPC,KAAM,kDACNC,KAAM,QACNC,kBAAmB,QAGrB/B,EAAO,CAACK,UAAWgB,EAAiBf,aAAckB,GAClDlC,EAAe,GAAD,mBAAKD,GAAL,CAAiBW,KAE/BX,EAAW2C,KAAKhC,GAChBR,aAAakB,QAAQ,aAAcf,KAAKgB,UAAUtB,IAElDiC,SAASC,eAAe,aAAaL,MAAQ,GAC7CI,SAASC,eAAe,gBAAgBL,MAAQ,YC/BlCe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAACpD,EAAD,MAASmC,SAASC,eAAe,SD8H3C,kBAAmBiB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e9392788.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\n\nexport default function App(){\n  let [tasks_list, set_tasks_list] = useState();\n\n  (function () {\n    let stored_tasks = localStorage.getItem('tasks_list');\n\n    if (stored_tasks === null) {\n      tasks_list = [];\n    } else {\n      let stored_tasks_array = JSON.parse(stored_tasks);\n      tasks_list = stored_tasks_array;\n    }\n  })();\n\n  let handleAddTask = (e) => {\n    e.preventDefault();\n\n    let task,\n        task_name_value = document.getElementById('task_name').value,\n        task_details_value = document.getElementById('task_details').value;\n\n    if (task_name_value === '' || task_details_value === '') {\n      let MySwal = withReactContent(Swal)\n\n      MySwal.fire({\n        title: 'Error!',\n        text: 'You Have To Enter The Task Name & Task Details!',\n        icon: 'error',\n        confirmButtonText: 'OK'\n      });\n    } else {\n      task = {task_name: task_name_value, task_details: task_details_value};\n      set_tasks_list([...tasks_list, task]);\n\n      tasks_list.push(task);\n      localStorage.setItem('tasks_list', JSON.stringify(tasks_list));\n\n      document.getElementById('task_name').value = '';\n      document.getElementById('task_details').value = '';\n    }\n  }\n\n  let handleDeleteTask = (index) => {\n    tasks_list.splice(index, 1);\n    set_tasks_list([...tasks_list]);\n    localStorage.setItem('tasks_list', JSON.stringify(tasks_list));\n  }\n\n  let tasksList = (tasks_list.length > 0) ? (\n    tasks_list.map((task, index) => {\n      return(\n        <tr key={Math.random()*10}>\n          <td>{index+1}</td>\n          <td>{task.task_name}</td>\n          <td>{task.task_details}</td>\n          <td><span className='task_action' onClick={() => handleDeleteTask(index)}>x</span></td>\n        </tr> \n      );\n    })\n  ) : (\n    <tr className='empty_row'>\n      <td colspan='4'><h4>You don't have any tasks to show!</h4></td>\n    </tr>\n  )\n\n  return (\n    <div className='todo_wrapper'>\n      <h1 className='todo_title'>\n        <span className='todo_title_to'>TO</span>\n        <span className='todo_title_do'>DO</span>\n        <span className='todo_title_seperator'>...</span>\n      </h1>\n      <table className='table center todo_body'>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Name</th>\n            <th>Details</th>\n            <th>Action</th>\n          </tr>\n        </thead>\n        <tbody>\n          {tasksList}    \n        </tbody>\n        <tfoot>\n          <tr>\n            <td colspan='2'>\n              <input\n                type='text'\n                name='task_name'\n                id='task_name'\n                placeholder='Enter Task Name'\n              />\n            </td>\n            <td>\n              <input\n                type='text'\n                name='task_details'\n                id='task_details'\n                placeholder='Enter Task Details'\n              />\n            </td>\n            <td>\n              <input\n                type='submit'\n                name='task_submit'\n                id='task_submit'\n                value='Add Task'\n                onClick={handleAddTask}\n              />\n            </td>\n          </tr>\n        </tfoot>\n      </table>\n    </div>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}